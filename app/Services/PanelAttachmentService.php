<?php

namespace App\Services;

use App\Models\CustomAttachmentMaterial;
use App\Models\PanelAttachment;
use App\Models\Trainset;
use App\Support\Enums\PanelAttachmentHandlerHandlesEnum;
use App\Support\Enums\PanelAttachmentStatusEnum;
use App\Support\Enums\RoleEnum;
use App\Support\Enums\TrainsetStatusEnum;
use App\Support\Interfaces\Repositories\PanelAttachmentRepositoryInterface;
use App\Support\Interfaces\Services\PanelAttachmentServiceInterface;
use Illuminate\Database\Eloquent\Model;
use App\Support\Enums\SerialPanelManufactureStatusEnum;

class PanelAttachmentService extends BaseCrudService implements PanelAttachmentServiceInterface {
    public function assignHandler(PanelAttachment $panelAttachment, array $data) {
        $this->panelAttachmentHandlerService()->updateOrCreate([
            'panel_attachment_id' => $panelAttachment->id,
            'handles' => $data['handles'],
        ],
            ['user_id' => auth()->user()->id,
                'handler_name' => auth()->user()->name, ]);

        return $panelAttachment;
    }

    public function assignCustomAttachmentMaterial(PanelAttachment $panelAttachment, array $data): CustomAttachmentMaterial {
        if (array_key_exists('override', $data)) {
            if (!$data['override']) {
                return $panelAttachment->custom_attachment_materials()->firstOrCreate([
                    'raw_material_id' => $data['raw_material_id'],
                ], [
                    'qty' => $data['qty'],
                ]);
            }
        }

        return $panelAttachment->custom_attachment_materials()->updateOrCreate([
            'raw_material_id' => $data['raw_material_id'],
        ], [
            'qty' => $data['qty'],
        ]);
    }

    public function delete($keyOrModel): bool {
        $keyOrModel->panel_attachment_handlers()->each(function ($panelAttachmentHandler) {
            $this->panelAttachmentHandlerService()->delete($panelAttachmentHandler);
        });

        $keyOrModel->serial_panels()->each(function ($serialPanel) {
            $this->serialPanelService()->delete($serialPanel);
        });

        return parent::delete($keyOrModel); // TODO: Change the autogenerated stub
    }

    protected function getRepositoryClass(): string {
        return PanelAttachmentRepositoryInterface::class;
    }

    public function confirmKPM(PanelAttachment $panelAttachment, $request) {
        $panelAttachment->status = $request['status'];

        $panelAttachment->save();

        return $panelAttachment;
    }

    public function update($panelAttachment, array $data): ?Model {
        if (array_key_exists('note', $data)) {
            $panelAttachment->attachment_notes()->create(
                [
                    'note' => $data['note'],
                    'status' => $data['status'],
                ]
            );
            unset($data['note']);
        }
        if (array_key_exists('status', $data) && auth()->user()->hasRole([RoleEnum::SUPERVISOR_ASSEMBLY])) {
            $panelAttachment->update([
                'supervisor_id' => auth()->user()->id,
            ]);
            $this->assignHandler($panelAttachment, array_merge($data, [
                'handles' => PanelAttachmentHandlerHandlesEnum::RECEIVE->value,
            ]));
        }

        $panelAttachment = parent::update($panelAttachment, $data);

        if ($panelAttachment->status == PanelAttachmentStatusEnum::DONE) {
            $this->checkTrainsetPanelAttachmentProgress($panelAttachment->trainset);
        }

        return $panelAttachment;
    }

    private function checkTrainsetPanelAttachmentProgress(Trainset $trainset) {
        $carriagePanels = $trainset->carriage_panels;

        $panelAttachments = $this->find([
            ['carriage_panel_id', 'in', $carriagePanels->pluck('id')->toArray()],
            ['status', PanelAttachmentStatusEnum::DONE->value],
            ['panel_attachment_id', 'null'], // only check on ancestor
        ]);

        if ($panelAttachments->count() == $carriagePanels->count()) {
            $trainset->update(['status' => TrainsetStatusEnum::DONE]);
        }
    }

    public function rejectKPM($panelAttachment, $request) {
        $note = $request->note;

        $panelAttachment = PanelAttachment::find($panelAttachment);

        $panelAttachment->status = PanelAttachmentStatusEnum::PENDING->value;

        $panelAttachment->attachment_notes()->create(
            [
                'note' => $note ? $note : '',
                'status' => PanelAttachmentStatusEnum::PENDING->value,
            ]
        );

        $panelAttachment->save();

        return $panelAttachment;
    }

    public function assignSpvAndReceiver(PanelAttachment $panelAttachment, array $data) {
        $panelAttachment->supervisor_id = $data['supervisor_id'] ?? auth()->user()->id;
        $attachmentHandler = [
            'handles' => PanelAttachmentHandlerHandlesEnum::RECEIVE->value,
        ];
        if (array_key_exists('receiver_name', $data)) {
            $attachmentHandler['handler_name'] = $data['receiver_name'];
        } else {
            $attachmentHandler['user_id'] = $data['receiver_id'];
        }
        $panelAttachment->panel_attachment_handlers()->create($attachmentHandler);
        $panelAttachment->save();

        return $panelAttachment;
    }

    public function checkProgressAttachment(PanelAttachment $panelAttachment) {
        $totalSerialPanels = $panelAttachment->serial_panels()->count();
        $totalCompleted = $panelAttachment->serial_panels()
            ->where('manufacture_status', SerialPanelManufactureStatusEnum::COMPLETED->value)
            ->count();

        if ($totalSerialPanels == $totalCompleted) {
            $panelAttachment->update([
                'status' => PanelAttachmentStatusEnum::DONE->value,
            ]);
        }

        $trainset = $panelAttachment->trainset;
        $this->trainsetService()->updateTrainsetStatus($trainset);
    }

}
